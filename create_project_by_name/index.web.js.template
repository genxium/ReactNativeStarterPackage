/**
* @flow
*/

import 'whatwg-fetch' // for browser compatibility

import React, {
  Component,
} from 'react'

import ReactNative, {
  AppRegistry,
} from 'react-native'

import {
  Router,
  Route,
  Redirect,
  IndexRedirect,
  withRouter,
  browserHistory, // this is a singleton
} from 'react-router'

import {
  SampleAppMovies,
  SampleMovieDetail,
} from './platform_independent_components'

import constants from './platform_independent_components/constants'

// Components
class ToBeReplacedProjName extends Component {
  render() {
    // Reference 1 https://facebook.github.io/react/docs/transferring-props.html
    // Reference 2 https://github.com/reactjs/react-router/issues/1531
    const dict = {
      ListView: ReactNative.ListView,
      ListViewDataSourceInitValue: new ReactNative.ListView.DataSource({
        rowHasChanged: (row1, row2) => row1 !== row2,
      }),
      HyperLink: React.createClass({
        propTypes: {
          onPress: React.PropTypes.func.isRequired
        },
        render: function() {
          const {onPress, ...other} = this.props;
          return (
            <button
            onClick={onPress}>
              {this.props.children}
            </button>
          );
        }
      }),
      View: ReactNative.View,
      Text: ReactNative.Text,
      Image: ReactNative.Image,
      StyleSheet: ReactNative.StyleSheet,
      goToSampleMovieDetail: function(sceneRef: Component, movieId: number) {
        const newLocation = {
          pathname: constants.ROUTE_PATHS.MOVIE + '/' + movieId
        };
        sceneRef.props.router.push(newLocation);
      },
      goBack: function(sceneRef: Component) {
        console.log('goBack');
        sceneRef.props.router.goBack();
      }
    };
    return React.cloneElement(
      this.props.children,
      dict
    )
  }
}

const routes = (
  <Router history={browserHistory}>
    <Route path={constants.ROUTE_PATHS.ROOT} component={ToBeReplacedProjName}>
      <IndexRedirect to={constants.ROUTE_PATHS.HOME} />
      <Route path={constants.ROUTE_PATHS.HOME} component={withRouter(SampleAppMovies)} />
      <Route path={constants.ROUTE_PATHS.MOVIE + constants.ROUTE_PARAMS.MOVIE_ID} component={withRouter(SampleMovieDetail)} />
    </Route>
  </Router>
);

// App registration and rendering
AppRegistry.registerComponent('ToBeReplacedProjName', () => () => routes)
AppRegistry.runApplication('ToBeReplacedProjName', { rootTag: document.getElementById('react-root') })
